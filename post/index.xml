<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 南村新造</title>
    <link>http://keenmisty.github.io/post/</link>
    <description>Recent content in Posts on 南村新造</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 09 Oct 2022 23:32:22 +0800</lastBuildDate><atom:link href="http://keenmisty.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>十一看房归来自省</title>
      <link>http://keenmisty.github.io/20221009by/</link>
      <pubDate>Sun, 09 Oct 2022 23:32:22 +0800</pubDate>
      
      <guid>http://keenmisty.github.io/20221009by/</guid>
      <description>今年的这个十一假期过的异常忙碌，然而忙碌之后却毫无收获。
往年假期时，我要么是在加班工作，要么是在返乡探亲，要么是休息放空。但或多或少的，总有一些获得或者修整。然而，今年过的很失败。
我在各种看房子。
越看房越觉得自己失败，明明是靠GIS混饭吃的人，事到临头却权衡不了选址这一经典的GIS问题。
确切的说，专业技术人员可悲之处就在于此，即使你自己明晰区位选择的道路，清楚未来的发展趋势，然而没有本钱，你就没法啪的一下把全副家当压上去赌了。
尤其是这其中还有无数的不可控的不确定性因素制约。
所看的第一个小区销售滔滔不绝的跟我讲，这个小区左华右暨，买了这里就能跟大学老师做邻居，有空就可以去两个大学校园逛逛。。。啧。。。充斥着对大学老师不切实际的臆想。。。他们不知道现在青椒们可怜的处境。
第二个小区则是讲江边江景的稀缺，讲未来的主干道，讲户型讲规划。。。啧，充斥着对产业升级不切实际的幻想。。。他们不知道现在实体制造业是多么艰难。
第三个小区嘛开始讲情怀、中间讲风景、末尾讲品位。。。啧，充斥着对小老板们不切实际的空想。。。他们不知道现在越是小老板投资越谨慎。
当然，这三个小区其实都在南村新造这边，可以说优点同源、缺点同根。不可否认，在大学城附近的区位可以说是整个珠三角最核心的位置。然而，空有位置，没有配套，这是最大的问题。能等得起吗？一个问号。都是期房，规划会变更吗？两个问号。
然后我们就去看了另一个备选地点，科学城。
同样又是三个小区，不同的是都是二手。好在是核心区位，emmm，至少在黄埔区来说，这里算是最好的位置。配套嘛，略好于南村新造，但也就止步于略好。然而，问题在于：未来发展空间还有吗？一个问号。未来脱手可能还有吗？两个问号。通勤强度能忍受吗？三个问号。
最焦灼的问题在于中小学教育配套，我以前总觉得高校附中附小是可以兜底的，完全没想到这居然是最大的困难，鬼能想到校区规划建设的速度竟能有那么大的区别。以及，我在写这篇blog的时候，西安曲江第五小学发生一个小学生坠井身亡的事件让我对如今的建筑质量又多打了一个问号，尤其是赶工修的中小学校舍怎样呢？同时，邻居的多样性也让人无从判断他们会不会乱改建搞出新的麻烦，这便是不可控的不确定性来源。
做一个自由的人，做一个对社会有价值的人。没有职场的勾心斗角，没有商业上的笑脸逢迎，没有生活中的锱铢必较。
如是而已。</description>
    </item>
    
    <item>
      <title>VScode插件梳理</title>
      <link>http://keenmisty.github.io/20220830/</link>
      <pubDate>Tue, 30 Aug 2022 22:09:33 +0800</pubDate>
      
      <guid>http://keenmisty.github.io/20220830/</guid>
      <description>最近终于开始有时间琢磨一些技术上的事情了.
那么,工欲善其事,必先利其器.
以前一直是用notepad++,然而对着F6按键发现最近它开始和TeXlive之间貌似有点不兼容了. 于是乎,换到VScode吧,反正也用过它写文章.
更新了之后发现变化很大,比起以前有用过的Atom和JetBrains的编辑器来说,最让我觉得好用的就是多了SSH远程功能.
那么第一组好用的插件就是Remote Development系列, -SSH,-WSL,-Containers,&amp;hellip;让我彻底弃用xshell了.
紧接着的第二组那就是vim,这个不必多说.
第三组是基于TeX写论文用的,这个我试来试去感觉还是LaTeX Workshop好用,左边扩展选好编译方式,右边直接pdf跟随就出来. 配合Translator之类的插件,基本上写论文的时候就可以很顺手.当然,论文嘛,第一要务还是论文的内容本身&amp;hellip;
第四组是和我们专业相关的几个语言插件,Fortran,python,matlab,ncl,嗯,想不到这么小众的语言,也都配备了相关的扩展,看来一起摸鱼的小同行都不少嘛&amp;hellip;hhhh
第五组嘛,既然都说到了摸鱼,那么,必要的摸鱼插件还是要有的,为了保持愉悦,必要的美化插件也是要有的. 至于是什么嘛&amp;hellip;身为老师,我还是不要讲出来了.
如果能就此专注搞技术钻研该多好~</description>
    </item>
    
    <item>
      <title>要做咸鱼躺平吗</title>
      <link>http://keenmisty.github.io/20220821xianyu/</link>
      <pubDate>Sun, 21 Aug 2022 22:53:31 +0800</pubDate>
      
      <guid>http://keenmisty.github.io/20220821xianyu/</guid>
      <description>2022年的这个暑假，过的尤其充实。 确切的说，过的尤其疲惫，感觉没日没夜都在工作，然而点检下来却没有做出什么成果。
好在今年毕业季我没有自己的毕业生。嗯，原因嘛，想来应该是因为我这个人太可恶，使得我这一届的三个学生退学了一个、转导师了两个。。。好在小朋友们发展的不错：退学的小伙子听说也去做了老师，不晓得伊某个晚上会不会后悔；转导师的两位小女生追寻着自己的理想去搞了青藏高原研究，然而那些花儿已经离去在人海茫茫。。。
如果说2020年是总算摆脱了一部分掣肘有时间写论文的一年，2021年是总算有了可爱的学生可以让无人机+雷达+模型的研究路子开花结果，那么2022年我的感觉就是在永无止境的开会、沟通、反复和劳累。
一方面是从3月份交了自己的面上本子之后，我就陷入了各种地方服务报告、项目推进会议、重点申报讨论之类的汪洋大海中。。。一方面是感觉我所带的学生并没有拧成一股绳。也许是我所做的项目摊子铺的乱，也许是我始终坚持让学生自己发掘自己的兴趣的缘故，使得学生所做的研究无法相互联系。这让我很为难，2022级的学生即将到来，再继续坚持从学生兴趣出发的初心，恐怕对他们自己和对团队的发展都不会好了。
不论我的本子中不中，也不论团队整体如何转向，我想做的事情还是那么三个，优化模型、提升技术、服务地方。然而纠结的是，究竟要如何让学生参与呢？wrfchem现在已经走上了开源快速迭代的道路，而我们用linux还磕磕绊绊；无人机载的传感器和反演解译正在飞速的发展，而我们连电烙铁+单片机还不会用；地方政府对污染精准化模拟的需求越来越紧迫，而我们的学生连去监测站实习都不肯。。。
唉，苦。
苦苦支撑，疲劳过度，是今年1-8月的主题词。
体检和手表健康app的结果给我敲了好几次警钟，提醒我已经是一个慢性病和症状超过了一页的危险人物了。
我想我下半年的主题还是要转去教学吧，看看能不能从本校的本科生里面捞一些好苗子，也看看能不能通过尝试培养研究生做助教来帮助他们更有效的学习。
就这样吧。</description>
    </item>
    
    <item>
      <title>发一发牢骚</title>
      <link>http://keenmisty.github.io/20220301laosao/</link>
      <pubDate>Tue, 01 Mar 2022 10:32:08 +0800</pubDate>
      
      <guid>http://keenmisty.github.io/20220301laosao/</guid>
      <description>最近陷入了写基金本子的汪洋大海中，大量看文献大量读书。写了一个自我感觉还算满意的本子，至少说服了自己想做的问题和内容就算基金委不资助，还是想做。
然而真正准备往系统上报的时候却发现了一个纠结和蛋疼的事情：填报关键词只能在某个申请代码的某个方向中选择。
这可就要了老命了。
一下子就陷入到底是选这个方向还是选那个方向还是选另一个方向的反复考量里，每个方向都有那么2-3个特别恰当的关键词，但每个方向下面却没有可以5个关键词均满足的情形。搞的我跟导师和同事吐槽，这系统设计填报表单的时候，八成是外包再外包完全没考虑过同一学科方向的关键词怎么可能区区十来个词就可以包含的，设计的时候也绝没想过有给我们这种跨在几个学科之间做交叉的人。
我想那个系统的设计者应该想不到，我一个环境科学专业的人，是怎么从此产生对数据库设计的兴趣的。。。
也给了我一点启示，研究年度计划里要留一部分时间来做所改进的参数化模型和相关数据资料的开源分享，只有大家都来看程序的源代码，才能知道我写的究竟对还是不对。计算机界的代码评审是一个相当重要的工作环节，然而很遗憾我过去的工作并没有全盘的经过同行的代码评审，而只是我自己重复性做一做、或是我的同学抽空审一审。唉，归根结底我们的科研仍是小作坊式的组织形式，对着传承了N代的祖传代码屎山，一个硕士生能够愿意进去啃就已经是态度很好了，然而即使是这样的态度，也要花两三年才能真正弄懂其中的一小块儿，而要达到能够改进的程度，则至少要花费4-5年拿个博士学位出来，可想而知这一工作的挑战性。
用模型难，做大气环境模型中某一环节某一机制的改进更难，要说服不懂写代码的专家这些工作的价值难上加难。
也许我应该去申请一些IT行业的钱，或者找一些IT界的同行来合作。
也许我应该继续劝退我的学生转行，他们挣大钱之后不知道会不会反哺我们这个行当。</description>
    </item>
    
    <item>
      <title>从Hexo迁移到Hugo</title>
      <link>http://keenmisty.github.io/20220201hugo/</link>
      <pubDate>Tue, 01 Feb 2022 21:47:31 +0800</pubDate>
      
      <guid>http://keenmisty.github.io/20220201hugo/</guid>
      <description>一年了登不上自己的blog，惨啊真是惨&amp;hellip; 费尽力气先配置了VPN，又配置好Github的ssh连接，突然发现之前用的Hexo框架所需的依赖库全都不知道什么时候废掉了&amp;hellip; 于是， 一怒之下干脆换框架好了。 搜索了一下知乎，发现Hugo相比Hexo更加简单方便，于是顺理成章的，迁移！迁移！
安装方法还算简单，直接brew install hugo就ok了，然后就是配置theme，配置好之后从exampleSite里找到config文件一通编辑，确实方便很多。 然后把之前hexo下的markdown博文放到content下的post文件夹里，直接deploy就有模有样了。 嗯，反正我也只是要恢复一个记录经验教训的荒蛮之地，美化什么的等日后有空再说吧，那就这样啦~
话说发现一个快速deploy的shell脚本，真是好用，分享在这里：
#!/bin/bash echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34; # build the project hugo -t even cd public git add . msg=&amp;#34;rebuilding site `date`&amp;#34; if [ $# -eq 1 ] then msg=&amp;#34;$1&amp;#34; fi git commit -m &amp;#34;$msg&amp;#34; # push source to github git push upstream master # come back to blog root cd .. 最后，鉴于今天是大年初一，那么还是要祝自己一句：新春快乐，龙腾虎跃~~~</description>
    </item>
    
    <item>
      <title>sftp与lftp传输文件技巧</title>
      <link>http://keenmisty.github.io/20201109sftp/</link>
      <pubDate>Mon, 09 Nov 2020 15:27:25 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20201109sftp/</guid>
      <description>题记： 最近被网络折腾的毫无脾气，不是这里安全问题就是那里权限问题，想要传输个文件真是难得要死。 历经千辛万苦，终于搭成功了定时sftp传输文件的操作，这技巧一定得记下来，以后估计会很常用：
背景： 学校超算由于安全需要不支持ftp传输文件，而合作方的服务器不支持rsync和scp等操作，于是综合考虑，选择使用sftp进行文件的传输。 sftp与ftp语法基本一致，好处是使用了sshd守护进程，坏处是传输效率比较低，还好在我的应用中只是传输小文件，所以sftp恰巧适合。 同时，由于最终的要求是每天将我们自己定时运行的空气质量预报的结果图片传递给合作方服务器，因此选择在crontab中加了个shell脚本使用lftp驱动sftp进行文件的上传。
批量文件夹上传脚本如下：
#!/bin/bash # write by changming # 2020-11-09 USER=username # 远程sftp服务器端用户名 PASSWORD=password # 远程sftp服务器端密码 SCRDIR=/localpath/localpath # 本地服务器拟上传路径 DESDIR=/dongguan/output # 远程sftp服务器拟存储路径 IP=XX.XX.XX.XX # 远程sftp服务器IP PORT=XXXXX # 远程端口 cd ${SCRDIR} FILES=`ls` for FILE in ${FILES} do echo ${FILE} lftp -u ${USER},${PASSWORD} sftp://${IP}:${PORT} &amp;lt;&amp;lt;EOF cd ${DESDIR} lcd ${SCRDIR} mirror -R ${FILE} ${FILE} bye EOF echo &amp;#34;commit to sftp successfully&amp;#34; done exit 0 代码详解:
使用lftp驱动sftp的原因是因为sftp无法以eof的形式传递参数； sftp直接操作的格式是&amp;rsquo;sftp -P 端口 用户名@ip&amp;rsquo;，使用lftp时则是&amp;rsquo;lftp -u 用户名,密码 sftp://ip:端口&amp;rsquo;； 传递文件夹的话需要在sftp中使用mirror命令，如果只是上传文件可以使用put命令 </description>
    </item>
    
    <item>
      <title>芒种喜雨</title>
      <link>http://keenmisty.github.io/20200605hjrsb/</link>
      <pubDate>Fri, 05 Jun 2020 17:59:03 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20200605hjrsb/</guid>
      <description>今日芒种，穹宇壮阔，雷雨正浓。
今天也是环境日，美丽中国，很自豪的作为一个行动者投身其中。
今天开心的事情很多，花最多精力带的学生，发表了一篇环境科学学报文章。
今年很欣慰，我所带的两个毕业级学生，一个要读博，一个已经手握offer。作为一个相当新的专业硕士导师，我所寻求和希望培养的学生是期望录取能够传递环保火种、可以在毕业后为国家环保事业做出自己贡献的人才的。想来两位小伙子在我的蹂躏下出去社会是能够做到这一点的，总算是为国家培养出了合格的人才。
可惜他们目前仍旧没达到超越我的水准，虽然这样的要求很难，但是必须要以此作为追求。我始终觉得，研究生特别是专业硕士这一层次的培养应当是培养业界的业务骨干，对于其中勤奋努力的学生是值得托付一技之长，更多的作为业界精英去培养。
如果我们所培育出的学术继承人在业务上超越不了自己的老师，如果不能引导出学生擅于快速合作的手段，如果不能通过研究生的培养指导出学生形成实际解决业界问题的能力，那么我们是无从培养学术种子、技术骨干、业界精英，推动大气环境科学的先进理念和技术去落地应用的。
期待今年团队新入学的学生，分给我所带的学生能够想清楚自己未来想要做什么、喜欢做什么、擅长做什么，尽快学会深入追寻自己的兴趣、加强自己的技能、发现和弥补自己思维的不足、在参与科研课题和应用课题中发展自己探索未知和学以致用的能力。
很高兴今年有一个小姑娘很不错，面对陌生的领域勇于尝试，面对布置的读书报告认真踏实，这样就已经很好了。
云收雨过波添，楼高水冷瓜甜，绿树阴垂画檐。</description>
    </item>
    
    <item>
      <title>愚人才乐</title>
      <link>http://keenmisty.github.io/20200401-happyapr/</link>
      <pubDate>Wed, 01 Apr 2020 15:54:33 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20200401-happyapr/</guid>
      <description>Bazinga!
今天不知道为什么，Google断掉了。正在写着的一个draft写不下去了。 烦躁，写一篇blog静静心。
疫情发生以来，越来越习惯于蹲在办公室远程和学生们交流了。以前我还试图推过worktile之类的web在线协同工具，然而却推不动。如今借着这一契机，大家全都对企业微信之类的工具使用纯熟了，我也越来越习惯在日程上每2个周盯一下进度。
然而学生嘛，能划水就划水，这一点谁都是这样子过来的。我自己就喜欢划，各种等到deadline才动手。这种惰性人人都有，无可厚非。
但是最近实在是忍不住发了几次火，哎。。。原本以为考进来的学生都很优秀，尊重自己最好的学生，让他可以自己找自己感兴趣的内容，再与我自己的方向产生交叉，稍差点的学生呢，给他一个指定的题目先练手打基础，学会思考的模式和框架，然后再找自己的兴趣，再差点的学生呢，先看组内组外的文献、看课本看手册。。。
没想到吖没想到，自己还是太天真了。原来这年头的学生真的有把老师当保姆的。 写着写着更烦了。。。
宰予昼寝，子曰：“朽木不可雕也，粪土之墙不可圬也，于予与何诛！”子曰：“始吾于人也，听其言而信其行；今吾于人也，听其言而观其行。于予与改是。”
还是老乡诚，不欺我。</description>
    </item>
    
    <item>
      <title>只争朝夕，不负韶华</title>
      <link>http://keenmisty.github.io/20200103-saysth/</link>
      <pubDate>Fri, 03 Jan 2020 16:32:46 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20200103-saysth/</guid>
      <description>2020年的第一个周五，捣鼓了一整个下午，终于恢复了对自己GitHub的pull/push操作能力。由此可见我的coding能力下降了多少，每天被报告、报表、事务、跑腿所包围，在学术上和技术上感觉我自己已经废了，真是绝望的要命。
回顾2019年，最美好的经历是在除夕前和老婆一起拥有了一个女儿，从此成为一个光荣的带娃男。然后在10月份不管不顾的搞出来两篇小文章，算是总算有那么一点点科学收获。此外，居然有空重读了一遍文明之光、在北京飞回广州的航班上看了一遍流浪地球。至于其他的，都是小事情了。
用学生的话讲，常老师越来越佛了。。。
嗯哼。
2020年，没有打算去交基金申请，对下一步能够解决的科学问题一点思考都没有，就不给国家浪费钱了。做好手头上的事情，是这上半年最大的意愿。
给自己立个Flag吧：
想要完成的小工作：
和小朱的合作 深圳的大任务 嘉晨的小文章 赵伟的小文章 想要尝试的新事物：
UAVs&amp;amp;ROBOTs Lidar uEMEP 想要戒掉的坏习惯：
吃夜宵 熬通宵 爆粗口 </description>
    </item>
    
    <item>
      <title>又是一个新学期了</title>
      <link>http://keenmisty.github.io/newterm20190924/</link>
      <pubDate>Tue, 24 Sep 2019 17:32:17 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/newterm20190924/</guid>
      <description>一年多了，完全没时间写点什么。
整个人已经是随时要垮掉的状态了。
带学生带的心累，再也没有刚刚工作，刚刚成为导师时那样的冲劲，恨不得把所有自己会的东西都灌给所有的师弟师妹。 然而赤裸裸的现实一直在打我脸，我越是花精力去带的学生，学的就越差。 基础薄弱却不好学，磨洋工之余像一个黑洞，不作为，不反馈。哎。。。也不知道到底是谁要毕业。催一催，push一下，反倒成恶人了。
就像老板说的那样，佛系了，爱怎样怎样吧，做自己的工作就是了。
奇怪的是，放下这种为学生前途负责的心态撒手不管之后，倒是开始有了些自己的时间。
希望新的一个学期，能够有新的同路人，一起做想做的研究。</description>
    </item>
    
    <item>
      <title>基于python-docx生成半自动化的word报告</title>
      <link>http://keenmisty.github.io/20180706pythondocx-md/</link>
      <pubDate>Fri, 06 Jul 2018 15:49:47 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20180706pythondocx-md/</guid>
      <description>缘起： 一直以来都有个需求是将固定格式的文档自动化生成，我以前曾经拿latex尝试过，效果其实很好，在linux下直接就可以生成pdf文档，非常适宜于放在服务器上。 然而，可悲的现实在于，latex过于阳春白雪。要说服更多的人走出自己的舒服区掌握一项新技能，实在是一件比触动灵魂更难的事情。 好在word还算是很多人都会的一个软件，而python也受到越来越多的人的青睐，我也希望走出自己的舒服区来尽量多的尝试它、学会它。
快速入门： 讲真，最快的入门方式就是看它的官方文档，即：https://python-docx.readthedocs.io/en/latest/ 不过我想，还是有一些值得记录下来的点作为笔记留作后用：
安装 python-docx的安装很简单，pip install即可。如果有anaconda的话，可以conda安装。
避免版本问题 由于python有2和3的问题，所以调用module时需要针对性的进行一些修改。
# for python 2.7 reload(sys) sys.setdefaultencoding(&amp;#39;utf-8&amp;#39;) # for python &amp;lt;=3.3 import imp imp.reload(sys) # for python &amp;gt;=3.4 import importlib importlib.reload(sys) 设置字体 python-docx使用styles.font来指定字体的设置。方式如下： document.styles[&amp;#39;Normal&amp;#39;].font.name = u&amp;#39;仿宋&amp;#39; document.styles[&amp;#39;Normal&amp;#39;]._element.rPr.rFonts.set(qn(&amp;#39;w:eastAsia&amp;#39;), u&amp;#39;仿宋&amp;#39;) 添加分页符 document.add_page_break() 表格
与其他数据的衔接
后期调整
待续。。。</description>
    </item>
    
    <item>
      <title>GLC2015土地覆被的邪门问题</title>
      <link>http://keenmisty.github.io/20180402-glc/</link>
      <pubDate>Mon, 02 Apr 2018 09:12:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20180402-glc/</guid>
      <description>之前更新了GLC2015的土地覆被资料到EMEP模型的输入，但是测试来测试去居然跟default的土地覆被资料模拟所得到的结果完全一致。 奇哉怪哉，难道说EMEP模型模拟时landuse不起作用吗？ 这个疑问看来要花点精力去解决了。 今日又遇到了另一个邪门问题，GLC2015的资料按USGS的24类体系重新分类之后，居然在东北华北出现了大面积的水体。 检查来检查去发现，GLC2015把自身的第11类设为了Herbaceous Cover，这尼玛什么鬼。。。 待续。。。</description>
    </item>
    
    <item>
      <title>郁闷的升级</title>
      <link>http://keenmisty.github.io/20180328-update-npm/</link>
      <pubDate>Wed, 28 Mar 2018 19:12:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20180328-update-npm/</guid>
      <description>好久没有更新博客了，天天忙各种杂事。
抽出晚饭的一点时间，本来是想升级一下hexo的版本，结果发现自己的node版本太旧无法支持升级，于是又升级node。搜索了一下以为很容易，没想到windows下又各种坑，不停的失败。 还好-force选项解救了我。。。然后顺利的更新了依赖链上的每个环节。
-force，如果也可以不停的-force其他人就好了，可惜总是我才是被-force的那个。。。</description>
    </item>
    
    <item>
      <title>新的主题，新的开始</title>
      <link>http://keenmisty.github.io/20170807-change/</link>
      <pubDate>Mon, 07 Aug 2017 17:22:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20170807-change/</guid>
      <description>趁着暑假，忙里偷闲，把主题换成了Meterial，感觉清爽了很多。 同时从下个学期，正式获得了教师的身份，抛开过去，新的开始。
希望过去不再不堪回首，现在不再不堪忍受，未来不再不堪想象&amp;hellip;</description>
    </item>
    
    <item>
      <title>用Doxygen&#43;Graphviz生成WRF-Chem程序结构图</title>
      <link>http://keenmisty.github.io/20161031-doxygen/</link>
      <pubDate>Mon, 31 Oct 2016 14:10:30 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20161031-doxygen/</guid>
      <description>缘起 做毕业论文的时候要改机制代码，并且要耦合到WRF-Chem模式里面使它生效，所以就需要搞清楚WRF-Chem的结构，以便调用和输出。
虽然可以通过长时间的看WRF-Chem源代码、debug尝试以及IDE帮忙，但有一份calling tree还是很好的，给师弟师妹们讲起来也方便很多。
因此，考虑尝试用程序结构自动分析工具Doxygen对它进行分析，用Graphviz生成出来。
Doxygen简介 Doxygen是一种程序结构自动分析的工具，也是一个程序文档自动生成的工具，它的官网，具体的使用方法可以在上面找到。
由于Doxygen支持Fortran，因此，直接拿来分析WRF-Chem就很简单了，配置好输出的目录及分析的项目，设置好调用Graphviz的路径，就可以直接运行输出了。
它可以生成html版的网页说明，也可以生成LaTeX文件及pdf文档。
WRF-Chem Calling Tree 物理机制-微物理过程调用： 物理机制-辐射过程调用： 物理机制-积云过程调用： 物理机制-陆面及边界层过程调用： 化学机制-化学过程调用： 后记 其实真的要改机制时还是要进去一点一点的看code的，这些图也就帮助下新手理解&amp;hellip; (说白了其实没啥用，然而做无用之事不是我辈博士生打发生命的最佳方式吗2333)</description>
    </item>
    
    <item>
      <title>希望死在自己选择的道路上</title>
      <link>http://keenmisty.github.io/20160907-thesis/</link>
      <pubDate>Wed, 07 Sep 2016 06:22:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160907-thesis/</guid>
      <description>读博是很痛苦的&amp;hellip; 然而却乐在其中&amp;hellip;
如果有一天我们终将死去，我希望我是在写出答案之后死在办公台旁&amp;hellip;</description>
    </item>
    
    <item>
      <title>NCL生成kml文件</title>
      <link>http://keenmisty.github.io/20160612-ncl/</link>
      <pubDate>Sun, 12 Jun 2016 16:30:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160612-ncl/</guid>
      <description>简介 KML(Keyhold Markup Language)是一种XML语法格式的标记语言，可以在多种应用程序中显示，包括 Google Earth、Google Map、ArcGIS(ArcMap/ArcGlobe)等，驴友们制作路书的时候也经常采用这种格式制作。
它的优势是可以把几何、符号系统、描述、属性、影像和行为等数据封装到单个源中，非常方便数据的共享和在线展示。
NCL对于KML的支持起自2013年，由Mohammad Abouali开发，他制作了一个名为 NCL_GETools 的NCL输出库，使得NCL可以将各种气象模型结果输出成KML格式，从而可以方便的在各类GIS软件中与其他地理信息数据一起进行处理，或是通过Google Earth/Map的API进行在线的展示。
NCL_GETools 需要6.2.0之后版本的NCL。
使用 首先，需要在你自己的ncl脚本中声明调用这一工具：
load &amp;#34;$NCARG_ROOT/lib/ncarg/nclscripts/contrib/NCL_GETools.ncl&amp;#34; 然后即可在你个人的ncl脚本中调用以下函数或者过程，来完成相应的动作：
函数
get_coordinate_system_string GetAltModeNumber read_ict squeeze get_KML_IconHref ones zeros dim_dimsizes Gray2RGBA Gray2cIndex ToHex add_KML_ColorMapStyles 过程
add_KML_Description add_KML_Address add_KML_Range add_KML_Name add_KML_Coordinates add_KML_Width add_KML_Open add_KML_FlyToView add_KML_Extrude add_KML_Visibility add_KML_Tessellate add_KML_Fill add_KML_Outline add_KML_Altitude add_KML_AltMode add_KML_Color add_KML_North add_KML_South add_KML_East add_KML_West add_KML_Rotation add_KML_StyleUrl add_KML_HideChildrenStyle hide_KML_Children add_KML_Href add_KML_Icon add_KML_Heading add_KML_TimeSpan add_KML_TimeStamp_When add_KML_LineStyle add_KML_IconStyle add_KML_PolyStyle add_KML_LineString add_KML_LatLonBox add_KML_LinearRing add_KML_OuterBoundaryIs add_KML_InnerBoundaryIs add_KML_GOverlay add_KML_Polygon add_KML_nSidedPolygon add_KML_Point Open_KML_MultiGeometry Close_KML_MultiGeometry Open_KML_Link Close_KML_Link Open_KML_NetworkLink Close_KML_NetworkLink Open_KML_Folder Close_KML_Folder Open_KML_Placemark Close_KML_Placemark Open_KML_Style Close_KML_Style Open_KML_Document Close_KML_Document OpenKML CloseKML RasterTimeSeries2KML SHP2KML Point2KML Velocity2KML Points2KML Collect_KMLs Path2KML Measurements2KML UnstructGrid2KML UnstructData2KML UnstructVelocity2KML 例子 Point2KML的使用 新增一个文件名为 1.</description>
    </item>
    
    <item>
      <title>收集的一些LiDAR数据库</title>
      <link>http://keenmisty.github.io/20160601/</link>
      <pubDate>Wed, 01 Jun 2016 15:30:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160601/</guid>
      <description>一些LiDAR数据： 大气重要参数高分辨率垂直分布探查数据库 http://atmosdb.aiofm.ac.cn/
Lidar Group of ABC http://lidar.abct.lmd.polytechnique.fr
六一儿童节快乐&amp;hellip; </description>
    </item>
    
    <item>
      <title>NotePad&#43;&#43;编辑LaTeX文档的高亮及自动编译配置</title>
      <link>http://keenmisty.github.io/20160512-latex/</link>
      <pubDate>Thu, 12 May 2016 00:22:18 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160512-latex/</guid>
      <description>NotePad++高亮显示LaTeX注释 NOTEPAD++是一个相当优秀的文本编辑器，支持多种编程、脚本和标记语言的语法高亮显示和代码折叠。
它原生支持TeX的语法高亮，只需要在工具栏中依次选中“语言-T-Tex”即可。
然而有人发现这个高亮对于注释而言只是第一个%符号，后面仍然跟正文一样。
我看了一下，这个其实解决起来很简单，在“设置-语言格式设置”中对它的色彩样式进行修改就好了。
选中语言TeX，样式DEFAULT，把它的前景色改变即可。
自动编译 首先需要安装一个插件NppExec，安装好之后，使用F6快捷键，在弹出来的命令框中输入以下命令：
cd $(CURRENT_DIRECTORY) ~\xelatex.exe $(NAME_PART).tex $EXIT ~\bibtex.exe $(NAME_PART).tex $EXIT ~\xelatex.exe $(NAME_PART).tex $EXIT ~\xelatex.exe $(NAME_PART).tex $EXIT ~\SumatraPDF.exe $(NAME_PART).pdf 其中，~是这些exe的路径。
可以把上述命令用 save&amp;hellip; 起一个名字保存起来，下次还可以再重复调用。
效果棒棒哒：$\color{red}{E=mc^2}$</description>
    </item>
    
    <item>
      <title>WRF-CMAQ基本概述</title>
      <link>http://keenmisty.github.io/20160317-cmaq-intro/</link>
      <pubDate>Thu, 17 Mar 2016 23:02:00 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160317-cmaq-intro/</guid>
      <description>WRF-CMAQ空气质量模式系统 空气污染预报概念 空气污染预报是基于污染排放源（包含排放源清单及实时监测数据）、气象数据，通过耦合了物理、化学机制的空气质量模型进行预测的过程。
CMAQ历史 CMAQ是美国1997年发布的第三代空气质量模型，它是美国环保局开发的用来模拟空气质量运算的开源项目。
90年代开始，随着计算机性能的增强，特别是高性能计算与通信计划的实施，更复杂的考虑多种大气过程、多尺度的空气质量模式的开发工作在美国展开。模式中需要考虑多种排放源，如工业、电厂、交通、生物排放等过程，研究的污染物和污染问题包括首要污染物、臭氧、颗粒物、能见度、酸沉降等。９０年代末开发的代表目前国际领先水平的综合多尺度空气质量模式Models-3/CMAQ（Community Multi-scale Air Quality），本着“一个大气”（One Atomosphere）的设计理念，融入了许多当前大气化学和大气环境领域的最新研究成果，将区域对流层大气作为整体，周密的考虑所有已知的物理和化学过程，综合考虑了不同物种之间的相互影响与转化， 最大限度的模拟真实的大气环境，可用于局地到区域多种尺度光化学烟雾，区域酸沉降、大气颗粒物质等大气污染问题的理论研究与业务预报。Models-3为Third-Generation量模式三部分组成。其核心是Community Air Quality Modeling System的通称，由中尺度气象模式、污染排放模式和多尺度空气质量模式系统，所以也可以称其为Models-3/CMAQ模式。
CMAQ的最大特色在一个大气（One-Atmosphere）的观念，打破了传统模式对单一物种的模拟。将复杂的空气污染情况如对流层的臭氧、PM、有毒物质、酸沉降及能见度等问题综合处理，用于多尺度、多污染物的空气质量预报、评估和决策政策等多种途径。美国环保局研制的未来第四代空气质量模型系统，将尽可能考虑气圈、永圈、和生物圈之闯的互相作用，以便提供一个更加全面的方法对整个 生态系统中的污染物的输送和消亡过程进行预报和评估。 CMAQ是目前国际领先水平的空气质量模型系统。 有关质量预报和评估系统
MM5/WRF-CMAQ耦合模式组成 气象驱动部分： MM5： MM5模式是由美国大气研究中心(NCAR)和美国宾州大学(PSU)在MM4模式基础上联合研制并发展起来的，是较先进的中尺度气象数值预报模式之一，已被广泛应用于各种中尺度现象的研究
WRF： WRF（Weather Research and Forecasting Model）模式是由美国环境预测中心NCEP,美国国家大气研究中心NCAR等美国科研机构中心着手开发的一种统一的中尺度天气预报模式。模式分为ARW(the Advanced Research WRF)和NMM(the Nonhydrostatic Mesoscale Model)两种，即研究用和业务用两种形式。
主要设置内容： 模拟区域网格资料（网格大小、网格尺寸等）； 模拟时间（Julia Date ）； 垂直分层（Sigma Layer 为分层基准）； 下垫面资料（土地利用、土壤、地形等）； 气温、气压等气象资料； 物理参数化方案组合；
源处理部分： SMOKE 包含固定源、移动源、面源、生物源四大处理模块 CMAQ化学部分： 初始值模块(Initial conditions processor, ICON)； 边界值模块(Boundary conditions processor, BCON)； 光解速率常数模块(Photolysis rate processor, JPROC)； 化学反应机制处理(Chemical-transport model processor, CCTM) 垂直对流效应； 水平对流效应； 垂直扩散效应； 水平扩散效应； 云程序机制； 气象化学反应机制； 液相化学反应机制； 云混合模型机制； 气悬胶动力与粒径机制； 烟流化学效应； 干沉降机制； 模式流程分析模块； </description>
    </item>
    
    <item>
      <title>GIS中Python的使用&lt;1&gt;</title>
      <link>http://keenmisty.github.io/20160215-gis-programming-and-automation1/</link>
      <pubDate>Mon, 15 Feb 2016 13:02:00 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160215-gis-programming-and-automation1/</guid>
      <description>GIS Modeling与Python介绍 ArcGIS中提供了两种写Python的方式：
ModelBuilder IDLE ModelBuilder的使用很简单，可以先拿来做模型的结构设计。 但是一些复杂的处理则需要写Python Script来实现。
因此：
Using Python window in ArcGIS：
import arcpy arcpy.Buffer_analysis(&amp;#34;us_cities&amp;#34;, &amp;#34;us_cities_buffered&amp;#34;, &amp;#34;15 miles&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;ALL&amp;#34;) 注意：所有需要调用ArcGIS的Tools的脚本，都需要import arcpy
比如打印feature的空间参考：
# Opens a feature class from a geodatabase and prints the spatial reference import arcpy featureClass = &amp;#34;C:/Data/USA/USA.gdb/StateBoundaries&amp;#34; # Describe the feature class and get its spatial reference desc = arcpy.Describe(featureClass) spatialRef = desc.spatialReference # Print the spatial reference name print spatialRef.Name 参考: Python Scripting for ArcGIS by Paul A.</description>
    </item>
    
    <item>
      <title>Noah-MP Learning</title>
      <link>http://keenmisty.github.io/20160202-sth-md/</link>
      <pubDate>Tue, 02 Feb 2016 18:34:15 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160202-sth-md/</guid>
      <description>The NoahMP calling tree Init noahmp_options NOAHMP_SFLX REDPRM FRH2O Run ATM PHENOLOGY ENERGY THERMOPROP CSNOW TDFCND RADIATION ALBEDO SNOW\_AGE SNOWALB\_BATS SNOWALB\_CLASS GROUNDALB TWOSTREAM SURRAD VEGE\_FLUX SFCDIF1 SFCDIF2 STOMATA CANRES ESAT RAGRB BARE\_FLUX TSNOSOI HRT HSTEP ROSR12 PHASECHANGE WATER CANWATER SNOWWATER SNOWFALL COMBINE DIVIDE COMBO COMPACT SNOWH2O SOILWATER ZWTEQ INFIL SRT WDFCND1 WDFCND2 SSTEP GROUNDWATER CARBON CO2FLUX ERROR </description>
    </item>
    
    <item>
      <title>建站说明</title>
      <link>http://keenmisty.github.io/20160126-buildup-blog/</link>
      <pubDate>Tue, 26 Jan 2016 23:16:00 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160126-buildup-blog/</guid>
      <description>建设这个站点，用来整理以前积攒的知识，用来学习还没有掌握的知识。
顺便用来记录生活，记录成长。
开博缘由:
在建立改造博客网站的过程中，学习和巩固基本知识； 通过写博客的方式，加深理解，显性化自己的隐性知识； 共享知识，吸引同好，交流进步。
一些个人相关信息和经验:
非计算机类专业，编程经验基本为零； 能流畅阅读大部分英文资料； 经常折腾各种系统、软件和手机 APP； 善用利用搜索解决各类问题； 追求“混乱”，并不喜欢变得井井有条。 欢迎交流:
个人邮件及社交网站等信息见边栏底部； 有什么留言或问题直接在文末留下评论即可。</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://keenmisty.github.io/hello-world/</link>
      <pubDate>Tue, 26 Jan 2016 21:05:00 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/hello-world/</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server $ hexo server More info: Server
Generate static files $ hexo generate More info: Generating
Deploy to remote sites $ hexo deploy More info: Deployment</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keenmisty.github.io/20160418-get_airport_weather/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://keenmisty.github.io/20160418-get_airport_weather/</guid>
      <description>title: 获取机场实时气象报告方法 date: 2016-04-18 14:45:00 tags:
python Learning permalink: get-airport-weather 最近坐飞机的时候总是遇到下雨，延误的很凄惨。坐在候机厅里问当班空姐吧，其实她们也不知道。 于是乎还是发挥咱半吊子的气象专业特长，找找看有没有什么办法获取机场气象站的实时报告。
手机端app： 手机端的天气app看起来挺多的，但是提供每十五分钟电文的少之又少。 航旅纵横或是飞常准虽然有这功能吧，但要么需要业内认证，要么需要花钱搞专业版。 找来找去，发现Flight Meteo这个app是可以提供各个机场的METAR和TAF的。 电脑端： 用电脑的话那就办法多多了，各种网站一堆一堆的。 然而没有那么多流量的时候，我还是更喜欢用脚本或者命令来获取。
这里安利两个办法，一个是weather-util，一个是python-metar。
python-metar可以从pyhton-metar下载到。 各位如果要结合python做批量获取，就在这个基础上改改改就好啦。
而如果像我一样只是在候机的时候查所在机场的气象报文，那么weather-util更合适。 它的安装很简单，直接sudo apt-get install weather-util就可以安装好。 而使用嘛，安装好之后一句命令即可：
weather &amp;lt;code&amp;gt;
其中，&amp;lt;code&amp;gt;是机场的ICAO代码，比如说广州就是ZGGG，北京就是ZBAA。
在这里可以查询全球机场的四字码。
weather-util查到的结果就像这样：
admin@ubuntu:~$ weather ZGGG Searching via station... [caching result Guangzhou, China] Current conditions at Guangzhou, China (ZGGG) 23-10N 113-20E 42M Last updated Apr 18, 2016 - 07:00 AM EDT / 2016.04.18 1100 UTC Temperature: 77 F (25 C) Relative Humidity: 65% Wind: Calm Sky conditions: mostly cloudy 如果需要看METAR电文的话，可以weather -v &amp;lt;code&amp;gt;， 那么输出的结果会变为：</description>
    </item>
    
  </channel>
</rss>
